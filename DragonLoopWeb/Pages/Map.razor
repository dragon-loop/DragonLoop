@page "/"
@using DragonLoopViewModels.ViewModels
@using DragonLoopModels
@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components;
@inject NavigationManager MyNavigationManager

<h1>Maps View</h1>

<div id="map" style="position:relative; width: 100%; height: 70vh;"></div>

@if (mapViewModel.Routes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>RouteId</th>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var route in mapViewModel.Routes)
            {
                <tr>
                    <td>@route.RouteId</td>
                    <td>@route.Name</td>
                    <td>
                        <label class="switch">
                            <input type="checkbox" @onchange="eventArgs => { ToggleRoute(route, eventArgs.Value); }" />
                            <span class="slider round"></span>
                        </label>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private object Route { get; set; }
    private MapViewModel mapViewModel;
    private ElementReference map;

    protected override async Task OnInitializedAsync()
    {
        mapViewModel = new MapViewModel(MyNavigationManager.BaseUri + "/api");
        await mapViewModel.LoadRoutes();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
        => await JSRuntime.InvokeAsync<object>
    ("jsFunctions.initMap");

    private async Task LoadRouteObjects(Route route)
    {
        await mapViewModel.LoadStops(route.RouteId);
    }

    private void RemoveRouteObjects(Route route)
    {
        mapViewModel.RemoveStops(route.RouteId);
    }

    protected async void ToggleRoute(object Route, object toggle)
    {
        var route = Route as Route;

        if ((bool)toggle)
        {
            await LoadRouteObjects(route);
        }
        else
        {
            RemoveRouteObjects(route);
        }
        foreach (var stop in mapViewModel.Stops)
        {
            await JSRuntime.InvokeAsync<object>("jsFunctions.setMarker", decimal.ToDouble(stop.XCoordinate), decimal.ToDouble(stop.YCoordinate), stop.Name);
        }
    }
}
